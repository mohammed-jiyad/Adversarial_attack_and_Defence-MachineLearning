# train_malware_classifier.py


import numpy as np
import tensorflow as tf
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Define file path (Update this with your actual dataset location)
file_path = "/content/drive/My Drive/miniproj_sem6/malware_dataset.csv"  # Change this path

# Load dataset
data = pd.read_csv(file_path)


data['classification'] = data['classification'].apply(lambda x: 1 if x.lower() == 'malware' else 0)


non_numeric_cols = [col for col in data.columns if data[col].dtype == 'object']
if non_numeric_cols:
    data = data.drop(columns=non_numeric_cols)


X = data.drop(columns=['classification']).values  # Features
y = data['classification'].values  # Labels (0 = benign, 1 = malware)


unique, counts = np.unique(y, return_counts=True)
class_distribution = dict(zip(unique, counts))
print(f"Class Distribution: {class_distribution}")


scaler = StandardScaler()
X = scaler.fit_transform(X)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


class_weights = {
    0: len(y_train) / (2 * np.sum(y_train == 0)),  # Weight for benign (0)
    1: len(y_train) / (2 * np.sum(y_train == 1))   # Weight for malware (1)
}
print(f"Computed Class Weights: {class_weights}")


model = Sequential([
    Dense(16, activation='relu', input_shape=(X_train.shape[1],)),  # More neurons
    Dense(8, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])


model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=10, batch_size=64, validation_data=(X_test, y_test),
                    class_weight=class_weights)


model.save("malware_classifier.h5")


loss, accuracy = model.evaluate(X_test, y_test)
print(f"Final Test Accuracy: {accuracy:.4f}")


plt.figure(figsize=(10, 5))
plt.plot(history.history['accuracy'], label='Training Accuracy', marker='o')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy', marker='s')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Model Accuracy Over Epochs')
plt.legend()
plt.grid(True)
plt.show()


plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'], label='Training Loss', marker='o', color='red')
plt.plot(history.history['val_loss'], label='Validation Loss', marker='s', color='green')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Model Loss Over Epochs')
plt.legend()
plt.grid(True)
plt.show()
